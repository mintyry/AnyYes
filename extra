// this was on listing.js front end
// const addListing = async (event) => {
//     event.preventDefault();

//     const title = document.querySelector('#title').value.trim();
//     const description = document.querySelector('#description').value.trim();
//     const category = document.querySelector('#cat-drop').value.trim();
//     const item = document.querySelector('#item').value.trim();
//     const brand = document.querySelector('#brand').value.trim();
//     const year = document.querySelector('#year').value.trim();
//     const condition = document.querySelector('#cond-drop').value.trim();
//     const price = document.querySelector('#price').value.trim();
//     const color = document.querySelector('#clr-drop').value.trim();
//     const isSpecialEdition = document.querySelector('input[name="is_special_edition"]:checked').value.trim();

//     const payload = {
//         title,
//         description,
//         category,
//         item,
//         console_brand: brand,
//         year,
//         condition,
//         price,
//         color,
//         is_special_edition: isSpecialEdition,
//     };

//     if (category === 'Game') {
//         payload.game_name = item;
//     } else if (category === 'Console') {
//         payload.console_name = item;
//     }

//     console.log(title)
//     console.log(description)
//     console.log(category)
//     console.log(item)
//     console.log(brand)
//     console.log(year)
//     console.log(condition)
//     console.log(price)
//     console.log(color)
//     console.log(isSpecialEdition)


//     const response = await fetch('/api/listings', {
//         method: 'POST',
//         body: JSON.stringify(payload),
//         headers: { 'Content-type': 'application/json' },
//     });

//     if (response.ok) {
//         console.log('nice');
//         addPhoto(); // Call the addPhoto function after the listing is added
//     } else {
//         alert('Failed to make a listing, Try again');
//     }
// };


























// splide code:

{/* <script src="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/js/splide.min.js"></script>
<script>
    var splide = new Splide('.splide', {
        type: 'loop',
        perPage: 1,
        autoplay: true,
        rewindSpeed: 1000,
    });

    splide.mount();
</script> */}

{/* <section class="splide" aria-label="Splide Basic HTML Example">
<div class="splide__track">
    <ul class="splide__list">
        <li class="splide__slide">
            <img src="/photos/pxlart-3.jpeg" class="crsl-img">
        </li>
        <li class="splide__slide">
            <img src="/photos/pxlart-4.png" class="crsl-img">
        </li>
        <li class="splide__slide">
            <img src="/photos/pxlart-2.gif" class="crsl-img">
        </li>
    </ul>
</div>
<button class="splide__toggle" type="button">
    <svg class="splide__toggle__play" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path d="m22 12-20 11v-22l10 5.5z" />
    </svg>
    <svg class="splide__toggle__pause" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path d="m2 1v22h7v-22zm13 0v22h7v-22z" />
    </svg>
</button>
</section> */}

<!-- // {{!-- splide css --}}
// <link rel="stylesheet"
//     href="https://cdn.jsdelivr.net/npm/@splidejs/splide@4.1.4/dist/css/themes/splide-sea-green.min.css"> -->



<!-- {/* <div class="flex min-h-full flex-col justify-center px-6 py-12 lg:px-8">

<div class="mt-10 sm:mx-auto sm:w-full sm:max-w-sm">
    <form class="space-y-6 login-form" action="#">
        <div>
            <label for="email" class="block text-sm font-medium leading-6 text-gray-900">Email address</label>
            <div class="mt-2">
                <input id="email" name="email" type="email" autocomplete="email" required
                    class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
            </div>
        </div>

        <div>
            <div class="flex items-center justify-between">
                <label for="password" class="block text-sm font-medium leading-6 text-gray-900">Password</label>
                <div class="text-sm">
                    <a href="#" class="font-semibold text-indigo-600 hover:text-indigo-500">Forgot password?</a>
                </div>
            </div>
            <div class="mt-2">
                <input id="password" name="password" type="password" autocomplete="current-password" required
                    class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
            </div>
        </div>

        <div>
            <button type="submit"
                class="login-form flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Sign
                in</button>
        </div>
    </form>

    <p class="mt-10 text-center text-sm text-gray-500">
        Not a member?
        <a href="#" class="font-semibold leading-6 text-indigo-600 hover:text-indigo-500">Start a 14 day free
            trial</a>
    </p>
</div>
</div>

<div class="col-md-6 mt-10 sm:mx-auto sm:w-full sm:max-w-sm">
<h2>Signup</h2>

<form class="form signup-form space-y-6" action="#" method="POST">
    <div>
        <label for="email" class="block text-sm font-medium leading-6 text-gray-900">Name</label>
        <div class="mt-2">
            <input id="name-signup" name="name" type="name" autocomplete="name" required
                class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
        </div>
    </div>
    <div>
        <label for="email" class="block text-sm font-medium leading-6 text-gray-900">Email address</label>
        <div class="mt-2">
            <input id="email-signup" name="email" type="email" autocomplete="current-email" required
                class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
        </div>
    </div>
    <div class="flex items-center justify-between">
        <label for="password" class="block text-sm font-medium leading-6 text-gray-900">Password</label>
        <div class="text-sm">
        </div>
    </div>
    <div class="mt-2">
        <input id="password-signup" name="password" type="password" autocomplete="current-password" required
            class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
    </div>
    <div
        class="form-group flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
        <button class="btn btn-primary" type="submit">Signup</button>
    </div>
</form>
</div>


<script src="/js/login.js"></script> */} -->





<!-- my attempt to gets orders to show on profile  -->
router.get('/', async (req, res) => {
   //use :user_name, + user_name: req.params.user_name
   try {

      const userListings = await Listing.findAll({
         where: {
            user_id: req.session.user_id
         },
         include: [
            {
            model: User,
            include: {
               model: Order
            }
         },
            Order],
         order: [['date_created', 'DESC']]
      });

      if (!userListings) {
         return res.status(404).json({ message: 'Oh, no! User does not exist!' })
      };

      let myListings = userListings.map(u => u.get({ plain: true }));

      //if statement to render listings for user in profile, but if no listings exist, can still show user_name

      if (myListings.length > 0) {
         //turns image base 64
         myListings.forEach(listing => {
            if (listing.image) {
               listing.image = listing.image.toString('base64')
            } else {
               listing.image = null
            }
         });

         const userName = myListings[0].user.user_name;

         const orders = [];
         myListings.forEach(listing => {
            if (listing.User && listing.User.Order) {
               orders.push(...listing.User.Order);
             }
         });

         //if there is a listing, we will render myListings and userName to profile.hbs
         res.render('profile', { myListings, userName, orders, logged_in: req.session.logged_in });

      } else {
         const user = await User.findByPk(req.session.user_id);
         const userName = user.user_name

         // if no listing, pass empty array for myListings, userName will show
         res.render('profile', { myListings: [], userName, orders:[], logged_in: req.session.logged_in })
      }
   } catch (error) {
      console.log(error);
      res.status(500).json({ message: 'User could not load.' });
   }
});